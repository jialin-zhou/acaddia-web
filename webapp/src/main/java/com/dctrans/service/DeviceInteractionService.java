package com.dctrans.service;\n\nimport com.dctrans.protocol.TelegramProtocolService;\nimport com.dctrans.serial.SerialPortService;\nimport com.fazecast.jSerialComm.SerialPort;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Service\public class DeviceInteractionService {\n\n    private final SerialPortService serialPortService;\n    private final TelegramProtocolService protocolService;\n    private final SimpMessagingTemplate messagingTemplate;\n\n    @Autowired\n    public DeviceInteractionService(SerialPortService serialPortService,\n                                  TelegramProtocolService protocolService,\n                                  SimpMessagingTemplate messagingTemplate) {\n        this.serialPortService = serialPortService;\n        this.protocolService = protocolService;\n        this.messagingTemplate = messagingTemplate;\n    }\n\n    public void connect(Map<String, Object> settings) {\n        try {\n            String port = (String) settings.get(\"port\");\n            int baudRate = (Integer) settings.get(\"baudRate\");\n            int dataBits = (Integer) settings.get(\"dataBits\");\n            int stopBits = (Integer) settings.get(\"stopBits\");\n            String parityStr = (String) settings.get(\"parity\");\n            int parity = \"None\".equalsIgnoreCase(parityStr) ? SerialPort.NO_PARITY :\n                         \"Odd\".equalsIgnoreCase(parityStr) ? SerialPort.ODD_PARITY :\n                         \"Even\".equalsIgnoreCase(parityStr) ? SerialPort.EVEN_PARITY : SerialPort.NO_PARITY;\n\n            // Pass a method reference as the data consumer callback\n            boolean success = serialPortService.connect(port, baudRate, dataBits, stopBits, parity, this::handleIncomingSerialData);\n\n            sendSerialStatusUpdate(success);\n\n        } catch (Exception e) {\n            System.err.println(\"Error parsing connection settings: \" + e.getMessage());\n            sendSerialStatusUpdate(false);\n        }\n    }\n\n    public void disconnect() {\n        serialPortService.disconnect();\n        sendSerialStatusUpdate(false);\n    }\n\n    public void fetchAndSendAvailablePorts() {\n        List<String> ports = serialPortService.getAvailablePorts();\n        messagingTemplate.convertAndSend(\"/topic/status\", Map.of(\"type\", \"available-ports\", \"payload\", ports));\n    }\n\n    public void sendCommand(Object commandData) {\n        if (!serialPortService.isConnected()) {\n            messagingTemplate.convertAndSend(\"/topic/status\", Map.of(\"type\", \"error\", \"payload\", \"Port not connected\"));\n            return;\n        }\n        byte[] dataFrame = protocolService.pack(commandData);\n        serialPortService.write(dataFrame);\n        \n        // Also push the sent data to the raw data topic for display\n        pushRawDataToFrontend(dataFrame, \"OUT\");\n    }\n\n    /**\n     * Callback method for the SerialPortService to handle incoming data.\n     * This method will be executed on the serial port listener's thread.\n     * @param data The raw byte array received from the serial port.\n     */\n    private void handleIncomingSerialData(byte[] data) {\n        pushRawDataToFrontend(data, \"IN\");\n    }\n\n    /**\n     * Pushes raw byte data to the frontend WebSocket topic.\n     * @param data The byte array.\n     * @param direction A string indicating the data direction (\"IN\" or \"OUT\").\n     */\n    private void pushRawDataToFrontend(byte[] data, String direction) {\n        // The frontend expects a JSON object with direction and payload (the byte array)\n        Map<String, Object> message = Map.of(\n            \"direction\", direction,\n            \"payload\", data\n        );\n        messagingTemplate.convertAndSend(\"/topic/raw-data\", message);\n    }\n\n    private void sendSerialStatusUpdate(boolean isConnected) {\n        Map<String, Object> statusUpdate = Map.of(\"type\", \"serial-status\", \"payload\", Map.of(\"connected\", isConnected));\n        messagingTemplate.convertAndSend(\"/topic/status\", statusUpdate);\n    }\n}\n